#!/bin/bash

# get directory of this script
DIR="${BASH_SOURCE%/*}"
if [[ ! -d "$DIR" ]]; then DIR="$PWD"; fi

UTILS="$DIR/../util"

# source utils
source "$UTILS/common.sh"

# initialize flag-parsing library
init_flags

# declare command-line options
DEFINE_integer 'nnode' 1 'Number of nodes to run the Grappa job with' 'n'
DEFINE_integer 'ppn' 2 'Number of cores/processes per node' 'p'
DEFINE_boolean 'freeze' false "Freeze all the jobs when there's an error" 'f'
DEFINE_boolean 'verbose' false "Verbose mode (prints info about job run. Not to be confused with --v option after '--' which sets the logging level for the job itself." 'v'

# parse the command-line
FLAGS "$@" || exit $?
eval set -- "${FLAGS_ARGV}"

# compute total number of MPI processes
totaln="$(( $FLAGS_nnode * $FLAGS_ppn ))"

# set freeze-on-error
[ ${FLAGS_freeze} -eq ${FLAGS_TRUE} ] && export GRAPPA_FREEZE_ON_ERROR=1

case `mpirun --version` in
mpirun*1.8*) # OpenMPI v1.8
  [ $FLAGS_verbose -eq $FLAGS_TRUE ] && echo "# OpenMPI 1.8"
  cmd="mpirun --n $totaln --map-by ppr:$FLAGS_ppn:node -- $@"
  ;;
mpirun*1.*) # OpenMPI v < 1.8
  cmd="mpirun --n $totaln --npernode $FLAGS_ppn -- $@"
  ;;
*)
  echo "Unsupported version."
  exit 1
esac

# if verbose, echo command to be executed
[ $FLAGS_verbose -eq $FLAGS_TRUE ] && echo "# $cmd"

# setup environment variables
source "$UTILS/env.sh"
exec $cmd
